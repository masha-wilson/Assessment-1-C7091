# CORRECTED VERSION:
data(mpg)
# CORRECTED VERSION:
data('mpg')
## 01 Question 1 ####
#INCORRECT VERSION:
data(mpg)
# Scatter plot with base R
plot(mpg$disp, mpg$hwy, col = as.factor(mpg$Year),
xlab = "Displacement", ylab = "Highway Miles per Gallon", pch = 19)
legend("topright", legend = unique(mpg$Year), col = unique(as.factor(mpg$Year)), pch = 19)
# Use base R to filter the data where cyl equals 8
subset(mpg, cy1 = '8')
# CORRECTED VERSION:
library(ggplot2)
data('mpg')
# Scatter plot with base R
plot(mpg$displ, mpg$hwy, col = as.factor(mpg$year),
xlab = "Displacement", ylab = "Highway Miles per Gallon", pch = 19) # disp1 corrected to displ
# cy1 corrected to cyl
# = corrected to ==
```
## 00 Setup ####
setwd("~/GitHub/Assessment-1-C7091")
## 00 Setup ####
setwd("~/GitHub/Assessment-1-C7091")
install.packages("pwr")
install.packages("pwr")
library(pwr)
?knitr::knit
## 00 Setup ####
setwd("~/GitHub/Assessment-1-C7091")
## 01 Question 1 ####
#INCORRECT VERSION:
data(mpg)
# Scatter plot with base R
plot(mpg$disp, mpg$hwy, col = as.factor(mpg$Year),
xlab = "Displacement", ylab = "Highway Miles per Gallon", pch = 19)
legend("topright", legend = unique(mpg$Year), col = unique(as.factor(mpg$Year)), pch = 19)
# Use base R to filter the data where cyl equals 8
subset(mpg, cy1 = '8')
# CORRECTED VERSION:
library(ggplot2)
data('mpg')
# Scatter plot with base R
plot(mpg$displ, mpg$hwy, col = as.factor(mpg$year),
xlab = "Displacement", ylab = "Highway Miles per Gallon", pch = 19) # disp1 corrected to displ
legend("topright", legend = unique(mpg$year), col = unique(as.factor(mpg$year)), pch = 19)
# Use base R to filter the data where cyl equals 8
subset(mpg, cyl == 8)
# Step 1:
pi * 5.5^2
circle_area <- pi * 5.5^2
# Step 2:
cylinder_volume <- circle_area * 3.2
round(cylinder_volume, 2)
install.packages("pwr")
library(pwr)
help(pwr.t.test)
help(pwr.t.test)
# Step 1: Create a 3x3 matrix with random numbers, and introduce NAs
set.seed(123)
matrix_with_na <- matrix(sample(c(NA, 1:9), 9, replace = TRUE), nrow = 3)
copy_of_original<-matrix_with_na
matrix_with_na[1,2] <- NA  # Introduce 3 specific NAs
matrix_with_na[2,3] <- NA
matrix_with_na[3,1] <- NA
print("Original Matrix with NAs:")
print(matrix_with_na)
# Step 2: Create a list with the same structure but no NAs
list_with_values <- as.list(as.numeric(matrix(1:9, nrow = 3)))
print(list_with_values)
# Step 3: Use a for-loop to find the corresponding missing number from the list and fill the matrix
for (i in 1:3) {
for (j in 1:3) {
if (is.na(matrix_with_na[i,j])) {
matrix_with_na[i,j] <- list_with_values[[(i-1)*3 + j]]  # Replace with corresponding value from list
}
}
}
print(matrix_with_na)
# Step 4: Try calculating the mean of the matrices
mean_matrix <- mean(matrix_with_na)
mean_of_original_copy <- mean(copy_of_original)
print(mean_of_original_copy)
print(mean_matrix)
# The original code did not work for the following reasons:
# 1 In the original code,
install.packages('emmeans')
library(emmeans)
data(iris)
iris
run_anova_posthoc <- function() {
# Perform ANOVA on the iris dataset
anova_result <- aov(Sepal.Length ~ Species, data = iris)
# Perform post-hoc test using emmeans
posthoc_result <- emmeans(anova_result, pairwise ~ Species)
comparisons <- as.data.frame(posthoc_result$contrasts)
print(comparisons)
comparisons_df <- data.frame(contrast = comparisons$contrast,
estimate = comparisons$estimate,
p.value = comparisons$p.value)
return(comparisons_df)
}
run_anova_posthoc()
aov_posthoc <- run_anova_posthoc()
print(aov_posthoc)
data(iris) # Load data
library(dplyr)
setosa <- filter(iris, Species == 'setosa')
versicolor <- filter(iris, Species == 'versicolor')
virginica <- filter(iris, Species == 'virginica')
species_data <- data.frame(setosa$Sepal.Length, versicolor$Sepal.Length, virginica$Sepal.Length)
# Determine the number of groups and the number of observations per group
k <- ncol(species_data)   # the number of groups
n_per_group <- vector(mode = 'integer', length = ncol(species_data))
for(i in 1:k) {
n_per_group[i] <- length(species_data[, i])
}                 # the for loop goes through each group, counting the number of observations.
# Determine the number of individual observations
n_total <- ncol(species_data) * nrow(species_data)
# Determine degrees of freedom
df_between <- k - 1       # Degrees of freedom between the groups
df_within <- n_total - k  # Degrees of freedom within each group
# Means
grand_mean <- mean(as.matrix(species_data)) # the total mean of all of the data in species_data
mean_per_group <- colMeans(species_data) # the mean for each group
# Calculate sum of Squares between
ss_between <- sum(n_per_group * (mean_per_group - grand_mean)^2)
# Print sum of squares between
ss_between
# Calculate sum of squares within
ss_within <- sum(sum((species_data[, 1] - mean_per_group[1])^2),
sum((species_data[, 2] - mean_per_group[2])^2),
sum((species_data[, 3] - mean_per_group[3])^2)
)
# Print sum of squares within
ss_within
# Calculate mean square between
msq_between <- ss_between / df_between
msq_between # print answer
# Calculate mean square within
msq_within <- ss_within / df_within
msq_within # print answer
# Find F Value
f_value <- msq_between / msq_within
# Print F Value
f_value
# The f value is 119.2645.
f_value <- round(f_value, 1) # round to one decimal place
# Print f value
print(f_value) # 119.3
iris_aov <- aov(Sepal.Length ~ Species, data = iris)
summary(iris_aov)
data('PlantGrowth')
print(PlantGrowth)
boxplot(weight ~ group,                                 # Create a boxplot of weight, for each group
data = PlantGrowth,                             # Select data
main = 'Boxplot of Plant Weight by Group',      # Main title for plot
xlab = 'Plant Group',                           # x-axis title
ylab = 'Weight (g)')                            # y-axis title
library(ggplot2)
ggplot(data = PlantGrowth, aes(x = group, y = weight)) +
geom_boxplot() +
labs(title = 'Boxplot of Plant Weight by Group', x = 'Plant Group', y = 'Weight(g)')
my_list <- list(list(1, 2:3, c(1, 3, 5, 7, 9)), 2)
my_list[[1]][[2]][4]
my_list_2 <- list(list(1, 2:3, list(1, 3, 5, 7, 9)), 2)          # c() was used instead of list(). Using list() created the nested list, rather than a vector as an item.
my_list_2[[1]][[3]][4]                                               # The second item was being indexed, which did not contain the third list. Therefore, it was not working.
my_list_3 <- list(list(1, 2:3, list(1, 3, 5, 7, 9), list(2, 4, 6, 8)), 2)    # Added another list of even numbers.
str(my_list_3)
my_list_3[[1]][[4]][4]                                                       # Indexed to find the correct number.
###### HEADER ####
## Who: Maria Wilson
## What: R Problem Set
## When: 2024-10-11
## CONTENTS ####
## 00 Setup
## 01 Question 1
## 02 Question 2
## 03 Question 3
## 04 Question 4
## 05 Question 5
## 06 Question 6
## 07 Question 7
## 08 Question 8
## 00 Setup ####
setwd("~/GitHub/Assessment-1-C7091")
## 01 Question 1 ####
#INCORRECT VERSION:
data(mpg)
# Scatter plot with base R
plot(mpg$disp, mpg$hwy, col = as.factor(mpg$Year),
xlab = "Displacement", ylab = "Highway Miles per Gallon", pch = 19)
setwd("~/GitHub/Assessment-1-C7091")
setwd("~/GitHub/Assessment-1-C7091")
install.packages("pwr")
install.packages("pwr")
library(pwr)
library(pwr)
